pipeline {
    agent any
    options{skipDefaultCheckout()}
    stages {
        stage('Get Code') {
            steps {
                echo WORKSPACE
                bat 'whoami & hostname'
                echo 'Removing old files from workspace'
                deleteDir()
                echo 'Getting GitHub code'
                git 'https://github.com/frankt99/helloworld.git'
                echo 'Workspace content'
                bat 'dir /b'
                stash name:'code', includes:'**'
            }
        }
        
        stage('Tests') {
            parallel {
                stage('Unit') {
                    agent {label 'nodo_principal'}
                    steps {
                        echo WORKSPACE
                        bat 'whoami & hostname'
                        unstash name:'code'
                        bat '''
                            echo 'Performing Unit test'
                            set PYTHONPATH=.
                            echo 'Performing unit tests and its result from line and conditional coverage'
                            coverage run --branch --source=app --omit=__init__.py,app\\api.py -m pytest --junitxml=result-unit.xml test\\unit
                            echo 'Generating coverage XML report'
                            coverage xml
                        '''
                        junit 'result-unit.xml'
                        stash name:'coverage-result', includes:'coverage.xml'
                    }
                }
                        
                stage('Rest') {
                    agent {label 'nodo_segundo'}
                    steps {
                        echo WORKSPACE
                        bat 'whoami & hostname'
                        unstash name:'code'
                        catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                            echo 'Performing Rest test'
                            bat '''
                                set FLASK_APP=app\\api.py
                                start python -m flask run
                                start java -jar C:\\wiremock\\wiremock-standalone-3.13.0.jar --port 9090 --verbose --root-dir test\\wiremock
                                ping -n 5 127.0.0.1 > nul
                                echo 'Generating rest test result'
                                python -m pytest --junitxml=result-rest.xml test\\rest
                            '''
                            junit 'result-rest.xml'
                        }
                    }
                }        
            }
        }

        stage('Flake8') {
            steps {
                echo WORKSPACE
                bat 'whoami & hostname'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash name:'code'
                    echo 'Performing Static code test'
                    bat 'flake8 --format=pylint --exit-zero app > flake8.out'
                    recordIssues tools: [flake8(name: 'Flake8', pattern: 'flake8.out')], qualityGates : [[threshold: 8, type: 'TOTAL', unstable: true], [threshold: 10, type: 'TOTAL', unstable: false]]
                }
            }
        }

        stage('Bandit') {
            steps {
                echo WORKSPACE
                bat 'whoami & hostname'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash name:'code'
                    echo 'Performing Security tests'
                    bat 'bandit --exit-zero -r . -f custom -o bandit.out --msg-template "{abspath}:{line}:{severity}:{test_id}:{msg}"'
                    recordIssues tools: [pyLint(name: 'Bandit', pattern: 'bandit.out')], qualityGates : [[threshold: 2, type: 'TOTAL', unstable: true], [threshold: 4, type: 'TOTAL', unstable: false]]
                }
            }
        }

        stage('Coverage') {
            steps {
                echo WORKSPACE
                bat 'whoami & hostname'
                catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE') {
                    unstash name:'code'
                    echo 'Performing Cobertura report'
                    unstash name:'coverage-result'
                    cobertura onlyStable: false, coberturaReportFile: 'coverage.xml', conditionalCoverageTargets: '90, 80, 80', lineCoverageTargets: '95, 85, 95'
                }
            }
        }         

        stage('Jmeter') {
            steps {
                echo WORKSPACE
                bat 'whoami & hostname'
                unstash name:'code'
                echo 'Performing Performance test'
                bat 'jmeter -n -t test\\jmeter\\test-plan-CP1.2.jmx -f -l flask.jtl'
                perfReport sourceDataFiles: 'flask.jtl'
            }
        }
    }            
}
